typedef struct huf
{int weight;
int parent,lchild,rchild;               //定义父子
}HTNode,*Huffmantree;

FILE* fptr=NULL;						//初始化文件指针

Huffmantree HT=NULL;                     //哈夫曼树初始化


int filetype(char ch[])              //文件类型
{int i=0,n;
while(ch[i]!='\0')
	{if(ch[i]=='.')                  //对.的处理
		n=i;
	i++;}
return n;}


void Select(int n,int* s1,int* s2)        //选择
{int i,temp;                               //ͨs1, s2的处理
for(i=0;i<=n;i++)
	if(HT[i].weight>0&&HT[i].parent==-1)  //权重比较和处理
		{*s1=i;
		 break;}
for(i=i+1;i<=n;i++)
	{if(HT[i].weight>0&&HT[i].parent==-1)
		{*s2=i;
		 break;}
	}
if(HT[*s2].weight<HT[*s1].weight)     
	{temp=*s1;
	 *s1=*s2;
	 *s2=temp;
	}
for(i=i+1;i<=n;i++)                  
	if(HT[i].weight>0&&HT[i].parent==-1)
		if(HT[i].weight<HT[*s1].weight)
			{*s2=*s1;
			*s1=i;}
		else if(HT[i].weight<HT[*s2].weight)
			*s2=i;
return;
}


int CreateHuffmantree(char filename[])                              //创建哈夫曼树
{int i,k,n=0;
 int s1,s2;
HT=(Huffmantree)malloc(sizeof(HTNode)*512);
if((fptr=fopen(filename,"rb")) ==NULL)
	{printf("can't open the source file\n");
	return 0;}
for(i=0;i<=255;i++)
 	{HT[i].parent=HT[i].lchild=HT[i].rchild=-1;     
	HT[i].weight=0;}
while((k=fgetc(fptr))!=EOF)
	{if(HT[k].weight==0)                           
		n++;             
 	 HT[k].weight++;
	}
rewind(fptr);
for(i=256;i<256+n-1;i++)                      
 	{Select(i-1,&s1,&s2);
	HT[s1].parent=i;
	HT[s2].parent=i;
	HT[i].lchild=s1;
	HT[i].rchild=s2;
	HT[i].weight=HT[s1].weight+HT[s2].weight;
	HT[i].parent=-1;
   	}
return n;
}


char** CreateHuffmancode(int n)              
{int i,j,start,pre;            
char**HC=(char**)malloc(sizeof(char*)*256);
for(i=0;i<256;i++)
	HC[i]=(char*)malloc(sizeof(char)*(n+1));      
char cd[n];
cd[n-1]='\0';                            

for(i=0;i<=255;i++)                     
	{	if(HT[i].weight==0)
			HC[i]='\0';
		else
			{start=n-1;             
			j=i;                   
			pre=HT[j].parent;
			while(pre!=-1)        
				{start--;          
				if(HT[pre].lchild==j)     
					cd[start]='0';
				else
					cd[start]='1';         
				j=pre;
				pre=HT[j].parent;
				}
			strcpy(HC[i],&cd[start]);	
			}
	}
return HC;
}

void  Huffmandecoding(FILE* fptr1,int num,int pos,char*filename,int k )
{rewind(fptr1);                         
 FILE* fptr2;
 char objectfile[10]="out2";
strcat(objectfile,&filename[k]);;
if((fptr2=fopen(objectfile,"wb")) ==NULL)
	printf("can't open the object file\n");
int c;
int i,j,m,p,weight;                    
for(i=0;i<=512;i++)
	if((HT[i].parent==-1)&&HT[i].weight>0)        
			 break;
p=i;
while((c=fgetc(fptr1))!=EOF)                   
		{num--;
		for(weight=128;weight>0;weight=weight/2)
			{m=c/weight;                            
			c=c%weight;
			if(m==0)                               
				p=HT[p].lchild;
			if(m==1)                              
				p=HT[p].rchild;
			if(HT[p].lchild==-1&&HT[p].rchild==-1)       
				{fputc(p,fptr2);                         
				p=i;
				if(num==-1&&weight==pos*2)
					break;}
			}                                   
		}
printf("哈夫曼编码结束, 输出到文件");
fclose(fptr2);
return;
}

int main(void)
{int n,i,j,k,weight,pos,num=0;
char c,ch;
char **HC;
FILE* fptr0;
FILE* fptr1;
if((fptr0=fopen("out0.txt","w+")) ==NULL)
	printf("can't open the object file\n");
if((fptr1=fopen("out1.txt","wb+")) ==NULL)
	printf("can't open the object file\n");
printf("对象文件无法打开");
char filename[100];
gets(filename);
n=CreateHuffmantree(filename);
if(n==0)
	return 0;
if(n==1)
	{rewind(fptr);
	while((c=fgetc(fptr))!=EOF)
		{k++;
		ch=c;
		fputc('0',fptr0);
		if(k%8==0)
			fputc((char)0,fptr1); }
	fputc((char)0,fptr1);}

else
{HC=CreateHuffmancode(n);            //创建哈夫曼代码

while((i=fgetc(fptr))!=EOF)
	fputs(HC[i],fptr0);                     //写入字符串到文件


rewind(fptr0);
weight=128;
j=0;
while((i=fgetc(fptr0))!=EOF)                
	{j+=(i-48)*weight;
	weight=weight/2;
	 if(weight==0)                           
		{weight=128;
		fputc((unsigned char)j,fptr1);
		num++;
		j=0;}
	}
if(weight!=0)
	{fputc(j,fptr1);
	pos=weight;	}   }                       
printf("处理过程如下:\n");
c=getchar();
if(c=='y')
	if(n>1)
	{
		Huffmandecoding(fptr1,num,pos,filename,filetype(filename));
		free(HT);     
	for(i=0;i<256;i++)
		free(HC[i]);
	free(HC);}
	else
	{	rewind(fptr1);                          
 		FILE* fptr2;
 		char objectfile[10]="out2";
		strcat(objectfile,&filename[filetype(filename)]);;
		if((fptr2=fopen(objectfile,"wb")) ==NULL)
			printf("can't open the object file\n");
		for(i=0;i<k;i++)
			fputc(ch,fptr2);
		printf("处理结果写入到out2中");
		fclose(fptr2);}


fclose(fptr);
fclose(fptr0);                
fclose(fptr1);
return 0;
}
